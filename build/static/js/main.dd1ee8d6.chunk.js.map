{"version":3,"sources":["App.js","Api/Api.js","serviceWorker.js","index.js"],"names":["offices","require","generateStats","events","stats","forEach","office","evt","nearestOffice","type","App","useState","setEvents","setStats","error","setError","refresh","doRefresh","useEffect","Promise","resolve","reject","fetch","headers","then","response","json","catch","e","message","err","className","icon","faMap","Map","center","zoom","style","height","TileLayer","attribution","url","map","mk","lonlat","position","Marker","key","userid","Popup","faList","Object","keys","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"gjDAMMA,EAAUC,EAAQ,IAGlBC,EAAgB,SAACC,GACrB,IAAMC,EAAQ,GAOd,OANAJ,EAAQK,SAAQ,SAACC,GAAD,OAAYF,EAAME,EAAOA,QAAU,MACnDH,EAAOE,SAAQ,SAACE,GACdH,EAAMG,EAAIC,eAAiBJ,EAAMG,EAAIC,gBAAkB,GACvDJ,EAAMG,EAAIC,eAAeD,EAAIE,MAAQL,EAAMG,EAAIC,eAAeD,EAAIE,OAAS,EAC3EL,EAAMG,EAAIC,eAAeD,EAAIE,WAExBL,GA4FMM,MAzFf,WACE,IADa,EAGeC,mBAAS,MAHxB,mBAGNR,EAHM,KAGES,EAHF,OAIaD,mBAAST,EAAc,KAJpC,mBAINE,EAJM,KAICS,EAJD,OAKaF,mBAAS,MALtB,mBAKNG,EALM,KAKCC,EALD,OAMgBJ,oBAAS,GANzB,mBAMNK,EANM,KAMGC,EANH,KAmBb,OAXAC,qBAAU,WC3BH,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,MAAM,yBAA0B,CAAEC,QAAS,CACzC,eAAgB,sBAEjBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIN,EAAQM,MACrBC,OAAM,SAAAC,GAAC,OAAIP,EAAOO,EAAEC,eDuBlBL,MAAK,SAAArB,GACJU,EAASX,EAAcC,IACvBS,EAAUT,GACVY,EAAS,MACTE,GAAU,MAEXU,OAAM,SAAAG,GAAG,OAAIf,EAASe,QACxB,CAACd,IAEAF,EAEA,yBAAKiB,UAAU,WACb,gFAKD5B,EASH,yBAAK4B,UAAU,OACb,4BAAQA,UAAU,cAChB,iDAIF,yBAAKA,UAAU,SAAQ,kBAAC,IAAD,CAAiBC,KAAMC,MAAS,2CACvD,6BACE,kBAACC,EAAA,EAAD,CAAKC,OA3CW,CAAC,QAAS,KA2CEC,KAAM,EAAGC,MAAO,CAAEC,OAAQ,SACpD,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAELtC,EAAOuC,KAAI,SAACC,GACX,IAAKA,EAAGC,OAAQ,OAAO,KACvB,IAAMC,EAAW,CAACF,EAAGC,OAAO,GAAID,EAAGC,OAAO,IAC1C,OACE,kBAACE,EAAA,EAAD,CAAQC,IAAKJ,EAAGK,OAAQH,SAAUA,GAChC,kBAACI,EAAA,EAAD,KAAQN,EAAGlC,YAOrB,yBAAKsB,UAAU,SAAQ,kBAAC,IAAD,CAAiBC,KAAMkB,MAAU,yDACxD,yBAAKnB,UAAU,SACb,yBAAKA,UAAU,cACZoB,OAAOC,KAAKhD,GAAOsC,KAAI,SAACpC,GACvB,OACE,yBAAKyC,IAAG,YAAOzC,GAAUyB,UAAU,eACjC,yBAAKA,UAAU,UAAUzB,GACc,IAAtC6C,OAAOC,KAAKhD,EAAME,IAAS+C,QAC1B,yBAAKtB,UAAU,UAAf,WAEF,4BACGoB,OAAOC,KAAKhD,EAAME,IAASoC,KAAI,SAACK,GAC/B,OACE,wBAAIA,IAAG,YAAOzC,GAAP,OAAgByC,IACrB,8BAAOA,EAAP,MAAoB,2BAAI3C,EAAME,GAAQyC,IADxC,2BA7ChB,yBAAKhB,UAAU,WACb,0CEtCYuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAb,GACLsD,QAAQtD,MAAMA,EAAMe,c","file":"static/js/main.dd1ee8d6.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport { getAllInterviewEvents } from './Api/Api'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMap, faList } from '@fortawesome/free-solid-svg-icons'\nconst offices = require('./officeList.json')\n\n\nconst generateStats = (events) => {\n  const stats = {}\n  offices.forEach((office) => stats[office.office] = {})\n  events.forEach((evt) => {\n    stats[evt.nearestOffice] = stats[evt.nearestOffice] || {}\n    stats[evt.nearestOffice][evt.type] = stats[evt.nearestOffice][evt.type] || 0\n    stats[evt.nearestOffice][evt.type]++\n  })\n  return stats\n}\n\nfunction App() {\n  const startPosition = [51.505, -0.09]\n\n  const [events, setEvents] = useState(null)\n  const [stats, setStats] = useState(generateStats([]))\n  const [error, setError] = useState(null)\n  const [refresh, doRefresh] = useState(false)\n\n  useEffect(() => {\n    getAllInterviewEvents()\n      .then(events => {\n        setStats(generateStats(events))\n        setEvents(events)\n        setError(null)\n        doRefresh(false)\n      })\n      .catch(err => setError(err))\n  }, [refresh])\n\n  if (error) {\n    return (\n      <div className=\"message\">\n        <div>Opps, that didn't work; try reloading the page</div>\n      </div>\n    )\n  }\n\n  if (!events) {\n    return (\n      <div className=\"message\">\n        <div>Loading</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Interview Reports\n        </p>\n      </header>\n      <div className=\"title\"><FontAwesomeIcon icon={faMap} /><span>Map View</span></div>\n      <div>\n        <Map center={startPosition} zoom={6} style={{ height: \"50vh\" }} >\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          {events.map((mk) => {\n            if (!mk.lonlat) return null\n            const position = [mk.lonlat[1], mk.lonlat[0]]\n            return (\n              <Marker key={mk.userid} position={position}>\n                <Popup>{mk.type}</Popup>\n              </Marker>\n            )\n          })}\n\n        </Map>\n      </div>\n      <div className=\"title\"><FontAwesomeIcon icon={faList} /><span>Stats By Monaco Office</span></div>\n      <div className=\"stats\">\n        <div className=\"statsTable\">\n          {Object.keys(stats).map((office) => {\n            return (\n              <div key={`OK${office}`} className=\"statsOffice\">\n                <div className=\"office\">{office}</div>\n                {Object.keys(stats[office]).length === 0 &&\n                  <div className=\"nodata\">No data</div>\n                }\n                <ul>\n                  {Object.keys(stats[office]).map((key) => {\n                    return (\n                      <li key={`SK${office}${key}`}>\n                        <span>{key}: </span><b>{stats[office][key]}</b> submissions\n                      </li>\n                    )\n                  })}\n                </ul>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const getAllInterviewEvents = () => {\n  return new Promise((resolve, reject) => {\n    fetch('/getAllInterviewEvents', { headers: {\n      'Content-Type': 'application/json'\n    }})\n    .then(response => response.json())\n    .then(json => resolve(json))\n    .catch(e => reject(e.message))\n  })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}